---
title: Análise de Sensores IoTs - Veracel
description: Análise de desempenho de dendrômetros IoTs para Veracel
author: 
  - name: Equipe de Sustentação
    affiliation: Treevia Forest Technologies
date: last-modified
title-block-banner: true
title-block-banner-color: "#3D7A43"
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    theme: cosmo
    fontcolor: black
    toc: true
    toc-location: left
    toc-title: Sumário
    toc-depth: 2
css: styles.css
execute: 
  echo: false
  warning: false
lang: "pt-br"
---

```{r}
library(tidyverse)
library(sf)
library(leaflet)
library(forecast)
library(plotly)
library(gt)

source("utils.R")

options(scipen = 999)

data <- read_csv2("data/Inventario-SingleTrees -- Exportado - 24-07-2024 13-41.csv")

df <-
  data |> 
  mutate(across(c(Data_Plantio, Data_Medicao), dmy)) |> 
  filter(!Dap_Estimado)
```


## Distribuição espacial

```{r}
points <- 
  data |> 
  count(Id_Amostra, Coordenada_X, Coordenada_Y) |> 
  st_as_sf(coords = c("Coordenada_X", "Coordenada_Y"))

labels <- sprintf(
  "<strong>Amostra %s</strong><br/>X: %f<br/>Y: %f",
  points$Id_Amostra,
  st_coordinates(points$geometry)[, 1],
  st_coordinates(points$geometry)[, 2]
) |> lapply(htmltools::HTML)

leaflet(points) |> 
  addProviderTiles("Esri.WorldImagery") |> 
  addMarkers(label = labels)
```

## Periodicidade

```{r}
#| warning: false

# # periodicidade
# df |> 
#   filter(year(Data_Medicao) == 2024) |> 
#   filter(!Dap_Estimado) |> 
#   ggplot(aes(Data_Medicao, `DAP (cm)`)) +
#   geom_point(aes(group = Id_Amostra), size = 1) +
#   facet_wrap(~Estrato, scales = "free_y")

estratos <- unique(df$Estrato)
plots <- map(1:length(estratos), ~plot_estratos(df, estratos[.x]))
```
:::{.column-page}
:::{.panel-tabset}
## Estrato 1
```{r}
ggplotly(plots[[1]], tooltip = "text")
```
## Estrato 2
```{r}
ggplotly(plots[[2]], tooltip = "text")
```
## Estrato 3
```{r}
ggplotly(plots[[3]], tooltip = "text")
```
## Estrato 4
```{r}
ggplotly(plots[[4]], tooltip = "text")
```
## Estrato 5
```{r}
ggplotly(plots[[5]], tooltip = "text")
```
## Estrato 6
```{r}
ggplotly(plots[[6]], tooltip = "text")
```
## Estrato 7
```{r}
ggplotly(plots[[7]], tooltip = "text")
```
## Estrato 8
```{r}
ggplotly(plots[[8]], tooltip = "text")
```
## Estrato 9
```{r}
ggplotly(plots[[9]], tooltip = "text")
```
## Estrato 10
```{r}
ggplotly(plots[[10]], tooltip = "text")
```
## Estrato 11
```{r}
ggplotly(plots[[11]], tooltip = "text")
```
## Estrato 12
```{r}
ggplotly(plots[[12]], tooltip = "text")
```
## Estrato 13
```{r}
ggplotly(plots[[13]], tooltip = "text")
```
## Estrato 14
```{r}
ggplotly(plots[[14]], tooltip = "text")
```
## Estrato 15
```{r}
ggplotly(plots[[15]], tooltip = "text")
```
## Estrato 16
```{r}
ggplotly(plots[[16]], tooltip = "text")
```
:::
:::

## Datas erradas
:::{.column-page}
```{r}
df |>
  filter(year(Data_Medicao) != 2024) |>
  select(Fazenda,
         Estrato,
         Talhao,
         Data_Medicao,
         Data_Plantio,
         Amostra,
         MAC,
         `DAP (cm)`) |>
  DT::datatable()
```
:::

## Variação, Outliers e Falhas

```{r}
df |> 
  group_by(Amostra, Estrato) |> 
  summarise(Variação = var(`DAP (cm)`), Desvio = sd(`DAP (cm)`)) |> 
  ungroup() |> 
  slice_max(Variação, n = 10) |> 
  group_by(Estrato) |> 
  gt() |> 
  tab_pretty() |> 
  fmt_integer(1) |> 
  tab_options(row_group.as_column = T) |> 
  tab_style(
      style = "vertical-align:middle",
      locations = gt::cells_row_groups()
    )
```

```{r}
df |>
  group_by(Estrato, Amostra) |>
  arrange(`DAP (cm)`) |>
  summarise(nliers = length(tsoutliers(`DAP (cm)`)$index)) |>
  ungroup() |>
  filter(nliers > 10) |>
  group_by(Estrato) |>
  arrange(-nliers) |> 
  rename("Nº de Outliers" = nliers) |> 
  gt() |> 
  tab_pretty() |> 
  tab_options(row_group.as_column = T) |> 
  fmt_integer(c(2,3), use_seps = F) |> 
  tab_style(
      style = "vertical-align:middle",
      locations = gt::cells_row_groups()
    )
```



