---
title: Análise de Sensores IoTs - Veracel
description: Análise de desempenho de dendrômetros IoTs para Veracel
author: 
  - name: Equipe de Sustentação
    affiliation: Treevia Forest Technologies
date: last-modified
title-block-banner: true
title-block-banner-color: "#3D7A43"
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    theme: cosmo
    fontcolor: black
    toc: true
    toc-location: left
    toc-title: Sumário
    toc-depth: 2
css: styles.css
execute: 
  echo: false
  warning: false
lang: "pt-br"
---

```{r}
library(tidyverse)
library(sf)
library(leaflet)
library(forecast)
library(plotly)
library(gt)
library(knitr)
library(htmltools)

source("utils.R")

options(scipen = 999)

data <- read_csv2("data/Inventario-SingleTrees -- Exportado - 24-07-2024 13-41.csv")

df <-
  data |> 
  mutate(across(c(Data_Plantio, Data_Medicao), dmy)) |> 
  filter(!Dap_Estimado)
```


## Distribuição espacial

```{r}
points <- 
  data |> 
  count(Estrato, Amostra, Coordenada_X, Coordenada_Y) |> 
  st_as_sf(coords = c("Coordenada_X", "Coordenada_Y"))

labels <- sprintf(
  "Estrato: %s <br/> Amostra: %s <br/>X: %f<br/>Y: %f",
  points$Estrato,
  points$Amostra,
  st_coordinates(points$geometry)[, 1],
  st_coordinates(points$geometry)[, 2]
) |> lapply(htmltools::HTML)

leaflet(points) |> 
  addProviderTiles("Esri.WorldImagery") |> 
  addMarkers(label = labels)
```

## Periodicidade

:::{.column-page}
:::{.panel-tabset}

```{r}
#| warning: false
#| output: asis


estratos <- unique(df$Estrato)

cat("##", estratos[1], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[1]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[2], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[2]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[3], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[3]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[4], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[4]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[5], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[5]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[6], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[6]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[7], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[7]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[8], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[8]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[9], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[9]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[10], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[10]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[11], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[11]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[12], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[12]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[13], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[13]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[14], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[14]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[15], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[15]), tooltip = "text"))
cat("\n\n")

cat("##", estratos[16], "\n\n\n")
tagList(ggplotly(plot_estratos(df, estratos[16]), tooltip = "text"))
cat("\n\n")
```

:::
:::

## Datas erradas
:::{.column-page}
```{r}
df |>
  filter(year(Data_Medicao) != 2024) |>
  select(Fazenda,
         Estrato,
         Talhao,
         Data_Medicao,
         Data_Plantio,
         Amostra,
         MAC,
         `DAP (cm)`) |>
  DT::datatable()
```
:::

## Outliers e Falhas

```{r}
#| warning: false

df |> 
  filter(year(Data_Medicao) == 2024) |> 
  group_by(Estrato, Amostra) |> 
  arrange(Data_Medicao) |> 
  mutate(gap = as.numeric(Data_Medicao - lag(Data_Medicao)),
         is.gap = if_else(gap >= 15, T, F)) |> 
  summarise(gaps = sum(is.gap, na.rm = T)) |> 
  filter(gaps > 0) |> 
  arrange(-gaps) |> 
  gt() |> 
  tab_pretty() |> 
  tab_options(row_group.as_column = T) |>
  cols_label(gaps = "N° de Gaps") |> 
  tab_style(
      style = "vertical-align:middle",
      locations = gt::cells_row_groups()
    ) |> 
  fmt_integer(use_seps = F) |> 
  opt_vertical_padding(scale = 0.25)
  
  
```


```{r}
#| warning: false

df |>
  group_by(Estrato, Amostra) |>
  arrange(`DAP (cm)`) |>
  summarise(nliers = length(tsoutliers(`DAP (cm)`)$index)) |>
  ungroup() |>
  filter(nliers > 10) |>
  group_by(Estrato) |>
  arrange(-nliers) |>
  rename("Nº de Outliers" = nliers) |>
  gt() |>
  tab_pretty() |>
  tab_options(row_group.as_column = T) |>
  fmt_integer(c(2, 3), use_seps = F) |>
  tab_style(style = "vertical-align:middle", locations = gt::cells_row_groups()) |> 
  opt_vertical_padding(scale = 0.25)
```
